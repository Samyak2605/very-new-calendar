{"ast":null,"code":"import \"./chunk-7ELT755Q.mjs\";\n\n// src/authorization.ts\nvar MAX_AGE_TO_MINUTES = {\n  \"A1.10min\": 10,\n  \"A2.1hr\": 60,\n  \"A3.4hr\": 240,\n  //4 * 60\n  \"A4.1day\": 1440,\n  //24 * 60,\n  \"A5.1wk\": 10080\n  //7 * 24 * 60,\n};\nvar ALLOWED_MAX_AGES = new Set(Object.keys(MAX_AGE_TO_MINUTES));\nvar ALLOWED_LEVELS = /* @__PURE__ */new Set([\"L1.firstFactor\", \"L2.secondFactor\", \"L3.multiFactor\"]);\nvar isValidMaxAge = maxAge => ALLOWED_MAX_AGES.has(maxAge);\nvar isValidLevel = level => ALLOWED_LEVELS.has(level);\nvar checkOrgAuthorization = (params, options) => {\n  const {\n    orgId,\n    orgRole,\n    orgPermissions\n  } = options;\n  if (!params.role && !params.permission) {\n    return null;\n  }\n  if (!orgId || !orgRole || !orgPermissions) {\n    return null;\n  }\n  if (params.permission) {\n    return orgPermissions.includes(params.permission);\n  }\n  if (params.role) {\n    return orgRole === params.role;\n  }\n  return null;\n};\nvar checkStepUpAuthorization = (params, {\n  __experimental_factorVerificationAge\n}) => {\n  if (!params.__experimental_assurance || !__experimental_factorVerificationAge) {\n    return null;\n  }\n  const {\n    level,\n    maxAge\n  } = params.__experimental_assurance;\n  if (!isValidLevel(level) || !isValidMaxAge(maxAge)) {\n    return null;\n  }\n  const [factor1Age, factor2Age] = __experimental_factorVerificationAge;\n  const maxAgeInMinutes = MAX_AGE_TO_MINUTES[maxAge];\n  const isValidFactor1 = factor1Age !== -1 ? maxAgeInMinutes > factor1Age : null;\n  const isValidFactor2 = factor2Age !== -1 ? maxAgeInMinutes > factor2Age : null;\n  switch (level) {\n    case \"L1.firstFactor\":\n      return isValidFactor1;\n    case \"L2.secondFactor\":\n      return factor2Age !== -1 ? isValidFactor2 : isValidFactor1;\n    case \"L3.multiFactor\":\n      return factor2Age === -1 ? isValidFactor1 : isValidFactor1 && isValidFactor2;\n  }\n};\nvar createCheckAuthorization = options => {\n  return params => {\n    if (!options.userId) {\n      return false;\n    }\n    const orgAuthorization = checkOrgAuthorization(params, options);\n    const stepUpAuthorization = checkStepUpAuthorization(params, options);\n    if ([orgAuthorization, stepUpAuthorization].some(a => a === null)) {\n      return [orgAuthorization, stepUpAuthorization].some(a => a === true);\n    }\n    return [orgAuthorization, stepUpAuthorization].every(a => a === true);\n  };\n};\nexport { createCheckAuthorization };","map":{"version":3,"names":["MAX_AGE_TO_MINUTES","ALLOWED_MAX_AGES","Set","Object","keys","ALLOWED_LEVELS","isValidMaxAge","maxAge","has","isValidLevel","level","checkOrgAuthorization","params","options","orgId","orgRole","orgPermissions","role","permission","includes","checkStepUpAuthorization","__experimental_factorVerificationAge","__experimental_assurance","factor1Age","factor2Age","maxAgeInMinutes","isValidFactor1","isValidFactor2","createCheckAuthorization","userId","orgAuthorization","stepUpAuthorization","some","a","every"],"sources":["/Users/samyakmittal/Desktop/very new calendar/very-new-calendar/node_modules/@clerk/shared/src/authorization.ts"],"sourcesContent":["import type {\n  __experimental_SessionVerificationLevel,\n  __experimental_SessionVerificationMaxAge,\n  CheckAuthorizationWithCustomPermissions,\n  OrganizationCustomPermissionKey,\n  OrganizationCustomRoleKey,\n} from '@clerk/types';\n\ntype MaxAgeMap = Record<__experimental_SessionVerificationMaxAge, number>;\ntype AuthorizationOptions = {\n  userId: string | null | undefined;\n  orgId: string | null | undefined;\n  orgRole: string | null | undefined;\n  orgPermissions: string[] | null | undefined;\n  __experimental_factorVerificationAge: [number, number] | null;\n};\n\ntype CheckOrgAuthorization = (\n  params: { role?: OrganizationCustomRoleKey; permission?: OrganizationCustomPermissionKey },\n  { orgId, orgRole, orgPermissions }: AuthorizationOptions,\n) => boolean | null;\n\ntype CheckStepUpAuthorization = (\n  params: {\n    __experimental_assurance?: {\n      level: __experimental_SessionVerificationLevel;\n      maxAge: __experimental_SessionVerificationMaxAge;\n    };\n  },\n  { __experimental_factorVerificationAge }: AuthorizationOptions,\n) => boolean | null;\n\nconst MAX_AGE_TO_MINUTES: MaxAgeMap = {\n  'A1.10min': 10,\n  'A2.1hr': 60,\n  'A3.4hr': 240, //4 * 60\n  'A4.1day': 1440, //24 * 60,\n  'A5.1wk': 10080, //7 * 24 * 60,\n};\n\nconst ALLOWED_MAX_AGES = new Set<__experimental_SessionVerificationMaxAge>(\n  Object.keys(MAX_AGE_TO_MINUTES) as __experimental_SessionVerificationMaxAge[],\n);\nconst ALLOWED_LEVELS = new Set<__experimental_SessionVerificationLevel>([\n  'L1.firstFactor',\n  'L2.secondFactor',\n  'L3.multiFactor',\n]);\n\n// Helper functions\nconst isValidMaxAge = (maxAge: __experimental_SessionVerificationMaxAge) => ALLOWED_MAX_AGES.has(maxAge);\nconst isValidLevel = (level: __experimental_SessionVerificationLevel) => ALLOWED_LEVELS.has(level);\n\n/**\n * Checks if a user has the required organization-level authorization.\n * Verifies if the user has the specified role or permission within their organization.\n * @returns null, if unable to determine due to missing data or unspecified role/permission.\n */\nconst checkOrgAuthorization: CheckOrgAuthorization = (params, options) => {\n  const { orgId, orgRole, orgPermissions } = options;\n  if (!params.role && !params.permission) {\n    return null;\n  }\n  if (!orgId || !orgRole || !orgPermissions) {\n    return null;\n  }\n\n  if (params.permission) {\n    return orgPermissions.includes(params.permission);\n  }\n  if (params.role) {\n    return orgRole === params.role;\n  }\n  return null;\n};\n\n/**\n * Evaluates if the user meets step-up authentication requirements.\n * Compares the user's factor verification ages against the specified maxAge.\n * Handles different verification levels (first factor, second factor, multi-factor).\n * @returns null, if requirements or verification data are missing.\n */\nconst checkStepUpAuthorization: CheckStepUpAuthorization = (params, { __experimental_factorVerificationAge }) => {\n  if (!params.__experimental_assurance || !__experimental_factorVerificationAge) {\n    return null;\n  }\n  const { level, maxAge } = params.__experimental_assurance;\n\n  if (!isValidLevel(level) || !isValidMaxAge(maxAge)) {\n    return null;\n  }\n\n  const [factor1Age, factor2Age] = __experimental_factorVerificationAge;\n  const maxAgeInMinutes = MAX_AGE_TO_MINUTES[maxAge];\n\n  // -1 indicates the factor group (1fa,2fa) is not enabled\n  // -1 for 1fa is not a valid scenario, but we need to make sure we handle it properly\n  const isValidFactor1 = factor1Age !== -1 ? maxAgeInMinutes > factor1Age : null;\n  const isValidFactor2 = factor2Age !== -1 ? maxAgeInMinutes > factor2Age : null;\n\n  switch (level) {\n    case 'L1.firstFactor':\n      return isValidFactor1;\n    case 'L2.secondFactor':\n      return factor2Age !== -1 ? isValidFactor2 : isValidFactor1;\n    case 'L3.multiFactor':\n      return factor2Age === -1 ? isValidFactor1 : isValidFactor1 && isValidFactor2;\n  }\n};\n\n/**\n * Creates a function for comprehensive user authorization checks.\n * Combines organization-level and step-up authentication checks.\n * The returned function authorizes if both checks pass, or if at least one passes\n * when the other is indeterminate. Fails if userId is missing.\n */\nexport const createCheckAuthorization = (options: AuthorizationOptions): CheckAuthorizationWithCustomPermissions => {\n  return (params): boolean => {\n    if (!options.userId) {\n      return false;\n    }\n\n    const orgAuthorization = checkOrgAuthorization(params, options);\n    const stepUpAuthorization = checkStepUpAuthorization(params, options);\n\n    if ([orgAuthorization, stepUpAuthorization].some(a => a === null)) {\n      return [orgAuthorization, stepUpAuthorization].some(a => a === true);\n    }\n\n    return [orgAuthorization, stepUpAuthorization].every(a => a === true);\n  };\n};\n"],"mappings":";;;AAgCA,IAAMA,kBAAA,GAAgC;EACpC,YAAY;EACZ,UAAU;EACV,UAAU;EAAA;EACV,WAAW;EAAA;EACX,UAAU;EAAA;AACZ;AAEA,IAAMC,gBAAA,GAAmB,IAAIC,GAAA,CAC3BC,MAAA,CAAOC,IAAA,CAAKJ,kBAAkB,CAChC;AACA,IAAMK,cAAA,GAAiB,mBAAIH,GAAA,CAA6C,CACtE,kBACA,mBACA,iBACD;AAGD,IAAMI,aAAA,GAAiBC,MAAA,IAAqDN,gBAAA,CAAiBO,GAAA,CAAID,MAAM;AACvG,IAAME,YAAA,GAAgBC,KAAA,IAAmDL,cAAA,CAAeG,GAAA,CAAIE,KAAK;AAOjG,IAAMC,qBAAA,GAA+CA,CAACC,MAAA,EAAQC,OAAA,KAAY;EACxE,MAAM;IAAEC,KAAA;IAAOC,OAAA;IAASC;EAAe,IAAIH,OAAA;EAC3C,IAAI,CAACD,MAAA,CAAOK,IAAA,IAAQ,CAACL,MAAA,CAAOM,UAAA,EAAY;IACtC,OAAO;EACT;EACA,IAAI,CAACJ,KAAA,IAAS,CAACC,OAAA,IAAW,CAACC,cAAA,EAAgB;IACzC,OAAO;EACT;EAEA,IAAIJ,MAAA,CAAOM,UAAA,EAAY;IACrB,OAAOF,cAAA,CAAeG,QAAA,CAASP,MAAA,CAAOM,UAAU;EAClD;EACA,IAAIN,MAAA,CAAOK,IAAA,EAAM;IACf,OAAOF,OAAA,KAAYH,MAAA,CAAOK,IAAA;EAC5B;EACA,OAAO;AACT;AAQA,IAAMG,wBAAA,GAAqDA,CAACR,MAAA,EAAQ;EAAES;AAAqC,MAAM;EAC/G,IAAI,CAACT,MAAA,CAAOU,wBAAA,IAA4B,CAACD,oCAAA,EAAsC;IAC7E,OAAO;EACT;EACA,MAAM;IAAEX,KAAA;IAAOH;EAAO,IAAIK,MAAA,CAAOU,wBAAA;EAEjC,IAAI,CAACb,YAAA,CAAaC,KAAK,KAAK,CAACJ,aAAA,CAAcC,MAAM,GAAG;IAClD,OAAO;EACT;EAEA,MAAM,CAACgB,UAAA,EAAYC,UAAU,IAAIH,oCAAA;EACjC,MAAMI,eAAA,GAAkBzB,kBAAA,CAAmBO,MAAM;EAIjD,MAAMmB,cAAA,GAAiBH,UAAA,KAAe,KAAKE,eAAA,GAAkBF,UAAA,GAAa;EAC1E,MAAMI,cAAA,GAAiBH,UAAA,KAAe,KAAKC,eAAA,GAAkBD,UAAA,GAAa;EAE1E,QAAQd,KAAA;IACN,KAAK;MACH,OAAOgB,cAAA;IACT,KAAK;MACH,OAAOF,UAAA,KAAe,KAAKG,cAAA,GAAiBD,cAAA;IAC9C,KAAK;MACH,OAAOF,UAAA,KAAe,KAAKE,cAAA,GAAiBA,cAAA,IAAkBC,cAAA;EAClE;AACF;AAQO,IAAMC,wBAAA,GAA4Bf,OAAA,IAA2E;EAClH,OAAQD,MAAA,IAAoB;IAC1B,IAAI,CAACC,OAAA,CAAQgB,MAAA,EAAQ;MACnB,OAAO;IACT;IAEA,MAAMC,gBAAA,GAAmBnB,qBAAA,CAAsBC,MAAA,EAAQC,OAAO;IAC9D,MAAMkB,mBAAA,GAAsBX,wBAAA,CAAyBR,MAAA,EAAQC,OAAO;IAEpE,IAAI,CAACiB,gBAAA,EAAkBC,mBAAmB,EAAEC,IAAA,CAAKC,CAAA,IAAKA,CAAA,KAAM,IAAI,GAAG;MACjE,OAAO,CAACH,gBAAA,EAAkBC,mBAAmB,EAAEC,IAAA,CAAKC,CAAA,IAAKA,CAAA,KAAM,IAAI;IACrE;IAEA,OAAO,CAACH,gBAAA,EAAkBC,mBAAmB,EAAEG,KAAA,CAAMD,CAAA,IAAKA,CAAA,KAAM,IAAI;EACtE;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}